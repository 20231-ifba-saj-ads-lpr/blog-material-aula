import{_ as n}from"./plugin-vue_export-helper-c27b6911.js";import{r as e,o,c as t,a as p,d as i,w as c,e as a,b as r}from"./app-94d919ec.js";const d={},l=a(`<h1 id="esqueleto-de-um-programa-em-linguagem-c" tabindex="-1"><a class="header-anchor" href="#esqueleto-de-um-programa-em-linguagem-c" aria-hidden="true">#</a> Esqueleto de um programa em linguagem c</h1><p><sup class="footnote-ref"><a href="#footnote1">[1]</a><a class="footnote-anchor" id="footnote-ref1"></a></sup> <sup class="footnote-ref"><a href="#footnote2">[2]</a><a class="footnote-anchor" id="footnote-ref2"></a></sup></p><p>Todo programa escrito em linguagem C que vier a ser desenvolvido deve possuir o esqueleto mostrado no código-fonte abaixo.</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h&gt;</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdlib.h&gt;</span></span>
<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;Hello World \\n&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">system</span><span class="token punctuation">(</span><span class="token string">&quot;pause&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>À primeira vista, esse parece ser um programa fútil, já que sua única finalidade é mostrar na tela uma mensagem dizendo <em>Hello World</em>, fazer uma pausa e terminar o programa. Porém, ele permite aprender alguns dos conceitos básicos da linguagem C</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h&gt;</span><span class="token comment">//declarações globais</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdlib.h&gt;</span><span class="token comment">//Bibliotecas utilizadas pelo programa</span></span>
<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token comment">//inicio do programa</span>
    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;Hello World \\n&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//escreve uma mensagem na tela de saída</span>
    <span class="token function">system</span><span class="token punctuation">(</span><span class="token string">&quot;pause&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//faz uma pausa antes de terminar o programa</span>
    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token comment">//retorna o valor 0 para o SO informando que finalizou sem erros</span>
<span class="token punctuation">}</span><span class="token comment">//fim do programa</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="entendendo-o-codigo" tabindex="-1"><a class="header-anchor" href="#entendendo-o-codigo" aria-hidden="true">#</a> Entendendo o código</h2><p>Temos, no início do programa, a região onde são feitas as suas declarações globais, ou seja, aquelas que são válidas para todo o programa. No exemplo, o comando <code>#include &lt;nome_da_biblioteca&gt;</code> é utilizado para declarar as bibliotecas que serão utilizadas.</p><div class="hint-container tip"><p class="hint-container-title">Biblioteca</p><p>Uma biblioteca é um conjunto de funções (pedaços de código) já implementados e que podem ser utilizados pelo programador.</p></div><p>No exemplo anterior, duas bibliotecas foram adicionadas ao programa: <code>stdio.h</code> (que contém as funções de leitura do teclado e escrita em tela) e <code>stdlib.h</code> (que contem funções de conversões de tipos e alocação de memória).</p><p>Todo o programa em linguagem C deve conter a função <code>main()</code>. Essa função é responsável pelo início da execução do programa, e é dentro dela que colocamos os comandos que queremos que o programa execute.</p><div class="hint-container tip"><p class="hint-container-title">Chaves</p><p>As chaves definem o início (&quot;{&quot;) e o fim (&quot;}&quot;) de um bloco de comandos/instruções.</p></div><p>No exemplo, as chaves definem o início e o fim do programa.</p><p>A função <code>main()</code> foi definida como uma função <code>int</code> (ou seja, retorna um valor do tipo inteiro) e, por isso, precisa devolver um valor inteiro. Temos então a necessidade do comando <code>return 0</code> apenas para informar que o programa chegou ao seu final e que está tudo OK.</p><p>A função <code>printf()</code> está definida na biblioteca <code>stdio.h</code>. Ela serve para imprimir uma mensagem de texto na tela do terminal.</p><p>O texto a ser escrito deve estar entre aspas duplas, e, dentro dele, podemos também colocar caracteres especiais, como o &quot;\\n&quot;, que indica que é para mudar de linha antes de continuar a escrever na tela.</p><p>O comando <code>system(&quot;pause&quot;)</code> serve para interromper a execução do programa (fazer uma pausa) para que se possa analisar a tela de saída, após o término da execução do programa. Ela está definida dentro da biblioteca <code>stdlib.h</code>.</p><p>Fim de instruções quase sempre termina com ponto e vírgula(&quot;;&quot;).</p><p>Os parênteses definem o início (&quot;(&quot;) e o fim (&quot;)&quot;) da lista de argumentos de uma função. Um argumento é a informação que será passada para a função utilizar. No exemplo, podemos ver que os comandos <code>main</code>, <code>printf</code> e <code>system</code> são funções.</p><h2 id="indentacao-do-codigo" tabindex="-1"><a class="header-anchor" href="#indentacao-do-codigo" aria-hidden="true">#</a> Indentação do código</h2><p>Outra coisa importante que devemos ter em mente quando escrevemos um programa é a indentação do código. Trata-se de uma convenção de escrita de códigos-fonte que visa a modificar a estética do programa para auxiliar a sua leitura e interpretação.</p><div class="hint-container tip"><p class="hint-container-title">Identação</p><p>A indentação é o espaçamento (ou tabulação) colocado antes de começar a escrever o código na linha. Ela tem como objetivo indicar a hierarquia dos elementos.</p></div><p>No nosso exemplo, os comandos <code>printf()</code>, <code>system()</code> e <code>return</code> possuem a mesma hierarquia (portanto, o mesmo espaçamento) e estão todos contidos dentro do comando <code>main()</code> (daí o porquê do espaçamento).</p><p>O ideal é sempre criar um novo nível de indentação para um novo bloco de comandos.</p><p>A indentação é importante, pois o nosso exemplo anterior poderia ser escrito em apenas três linhas, sem afetar o seu desempenho, mas com alto grau de dificuldade de leitura para o programador</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h&gt;</span> </span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdlib.h&gt;</span> </span>
<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;Hello World \\n&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token function">system</span><span class="token punctuation">(</span><span class="token string">&quot;pause&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="entrada-e-saida-de-dados" tabindex="-1"><a class="header-anchor" href="#entrada-e-saida-de-dados" aria-hidden="true">#</a> Entrada e saída de dados</h2><h3 id="printf" tabindex="-1"><a class="header-anchor" href="#printf" aria-hidden="true">#</a> printf</h3><p>A função <code>printf()</code> é uma das funções de saída/escrita de dados da linguagem C. Seu nome vem da expressão em inglês print formatted, ou seja, escrita formatada. Basicamente, a função <code>printf()</code> escreve na saída de vídeo (tela) um conjunto de valores, caracteres e/ou sequência de caracteres de acordo com o formato especificado.</p><p>A forma geral da função <code>printf()</code> é:</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;tipos de saída&quot;</span><span class="token punctuation">,</span> lista de variáveis<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>A função <code>printf()</code> recebe dois parâmetros de entrada:</p><ul><li><em>&quot;tipos de saída&quot;</em>: conjunto de caracteres que especifica o formato dos dados a serem escritos e/ou o texto a ser escrito.</li><li><em>lista de variáveis</em>: conjunto de nomes de variáveis, separados por vírgula, que serão escritos.</li></ul><h4 id="escrevendo-valores-formatados" tabindex="-1"><a class="header-anchor" href="#escrevendo-valores-formatados" aria-hidden="true">#</a> Escrevendo valores formatados</h4><p>Quando queremos escrever dados formatados na tela usamos a forma geral da função, a qual possui os tipos de saída. Eles especificam o formato de saída dos dados que serão escritos pela função <code>printf()</code>. Cada tipo de saída é precedido por um sinal de &quot;%&quot;, e um tipo de saída deve ser especificado para cada variável a ser escrita.</p><p>Assim, se quiséssemos escrever uma única expressão com o comando <code>printf()</code>, faríamos</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;%tipo&quot;</span><span class="token punctuation">,</span> expressão<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;%tipo1 %tipo2&quot;</span><span class="token punctuation">,</span> expressão1<span class="token punctuation">,</span> expressão2<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>Note que os formatos e as expressões a serem escritas com aquele formato devem ser especificados na mesma ordem. Além disso, as variáveis e/ou expressão devem ser separadas por vírgulas.</p><table><thead><tr><th>Tipos</th><th>Saída para o printf</th></tr></thead><tbody><tr><td>%c</td><td>escrita de um caractere (char)</td></tr><tr><td>%d ou %i</td><td>escrita de números inteiros (int ou char)</td></tr><tr><td>%u</td><td>escrita de números inteiros sem sinal (unsigned)</td></tr><tr><td>%f</td><td>escrita de número reais (float ou double)</td></tr><tr><td>%s</td><td>escrita de vários caracteres</td></tr><tr><td>%p</td><td>escrita de um endereço de memória</td></tr><tr><td>%e ou %E</td><td>escrita em notação científica</td></tr></tbody></table><h3 id="scanf" tabindex="-1"><a class="header-anchor" href="#scanf" aria-hidden="true">#</a> Scanf</h3><p>A função <code>scanf()</code> é uma das funções de entrada/leitura de dados da linguagem C. Seu nome vem da expressão em inglês scan formatted, ou seja, leitura formatada. Basicamente, a função <code>scanf()</code> lê do teclado um conjunto de valores, caracteres e/ou sequência de caracteres, de acordo com o formato especificado. A forma geral da função <code>scanf()</code> é:</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">&quot;tipos de entrada&quot;</span><span class="token punctuation">,</span> lista de variáveis<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>A função <code>scanf()</code> recebe dois parâmetros de entrada:</p><ul><li><em>&quot;tipos de entrada&quot;</em>: conjunto de caracteres que especifica o formato dos dados a serem lidos.</li><li><em>lista de variáveis</em>: conjunto de nomes de variáveis que serão lidos e separados por vírgula, em que cada nome de variável é precedido pelo operador &amp;.</li></ul><p>Os <em>tipo de entrada</em> especificam o formato de entrada dos dados que serão lidos pela função <code>scanf()</code>. Cada tipo de entrada é precedido por um sinal de %, e um tipo de entrada deve ser especificado para cada variável a ser lida. Assim, se quiséssemos ler uma única variável com o comando <code>scanf()</code>, faríamos:</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">&quot;%tipo&quot;</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>variavel<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>Se fossem duas as variáveis a serem lidas, faríamos:</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">&quot;%tipo1 %tipo2&quot;</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>variavel1<span class="token punctuation">,</span> <span class="token operator">&amp;</span>variavel2<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>e assim por diante. Note que os formatos e as variáveis que armazenarão o dado com aquele formato devem ser especificados na mesma ordem. Além disso, as variáveis devem ser separadas por vírgulas.</p><div class="hint-container warning"><p class="hint-container-title">Avisos</p><p>Na linguagem C, é necessário colocar o símbolo &amp; antes do nome de cada variável a ser lida pelo comando <code>scanf()</code>.</p></div><p>Todas as variáveis que receberão valores do teclado por meio de <code>scanf()</code> deverão ser passadas pelos seus endereços. Isso se faz colocando o operador de endereço &quot;&amp;&quot; antes do nome da variável.</p><p>A função <code>scanf()</code> pode ser usada para ler praticamente qualquer tipo de dado. No entanto, ela é usada com mais frequência para a leitura de números inteiros e/ou de ponto flutuante (números reais). A Tabela abaixo mostra alguns dos tipos de saída suportados pela linguagem.</p><table><thead><tr><th>Tipo</th><th>Leitura de dado</th></tr></thead><tbody><tr><td>%c</td><td>leitura de um caractere (char)</td></tr><tr><td>%d ou %i</td><td>leitura de números inteiros (int ou char)</td></tr><tr><td>%f</td><td>leitura de número reais (float ou double)</td></tr><tr><td>%s</td><td>leitura de vários caracteres</td></tr><tr><td>[Tipos de leituras de dados]</td><td></td></tr></tbody></table><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h&gt;</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdlib.h&gt;</span></span>
<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>  
  <span class="token keyword">int</span> x<span class="token punctuation">,</span>z<span class="token punctuation">;</span>
  <span class="token keyword">float</span> y
  <span class="token comment">//Leitura de um valor inteiro</span>
  <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">&quot;%d&quot;</span><span class="token punctuation">,</span><span class="token operator">&amp;</span>x<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token comment">//Leitura de um valor real</span>
  <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">&quot;%f&quot;</span><span class="token punctuation">,</span><span class="token operator">&amp;</span>y<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token comment">//Leitura de um valor inteiro e outro real</span>
  <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">&quot;%d%f&quot;</span><span class="token punctuation">,</span><span class="token operator">&amp;</span>x<span class="token punctuation">,</span><span class="token operator">&amp;</span>y<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token comment">//Leitura de dois valores inteiros</span>
  <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">&quot;%d%d&quot;</span><span class="token punctuation">,</span><span class="token operator">&amp;</span>x<span class="token punctuation">,</span><span class="token operator">&amp;</span>z<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token comment">//Leitura de dois valores inteiros com espaco</span>
  <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">&quot;%d %d&quot;</span><span class="token punctuation">,</span><span class="token operator">&amp;</span>x<span class="token punctuation">,</span><span class="token operator">&amp;</span>z<span class="token punctuation">)</span><span class="token punctuation">;</span>  
  <span class="token function">system</span><span class="token punctuation">(</span><span class="token string">&quot;pause&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Nesse exemplo, os comandos</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">&quot;%d%d&quot;</span><span class="token punctuation">,</span><span class="token operator">&amp;</span>x<span class="token punctuation">,</span><span class="token operator">&amp;</span>z<span class="token punctuation">)</span><span class="token punctuation">;</span> 
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>e</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">&quot;%d %d&quot;</span><span class="token punctuation">,</span><span class="token operator">&amp;</span>x<span class="token punctuation">,</span><span class="token operator">&amp;</span>z<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>são equivalentes. Isso ocorre porque o comando <code>scanf()</code> ignora os espaços em branco entre os tipos de entrada. Além disso, quando o comando <code>scanf()</code> é usado para ler dois ou mais valores, podemos optar por duas formas de digitar os dados no teclado:</p><ul><li>Digitar um valor e, em seguida, pressionar a tecla <em>ENTER</em>. Fazer isso para cada valor a ser digitado.</li><li>Digitar todos os valores separados por espaço e, por último, pressionar a tecla <em>ENTER</em>.</li></ul><p>O comando <code>scanf()</code> ignora apenas os espaços em branco entre os tipos de entrada. Qualquer outro caractere inserido entre os tipos de dados deverá ser digitado pelo usuário, mas será descartado pelo programa.</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h&gt;</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdlib.h&gt;</span></span>
<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>  
  <span class="token keyword">int</span> dia<span class="token punctuation">,</span> mes<span class="token punctuation">,</span> ano<span class="token punctuation">;</span>
  <span class="token comment">//Leitura de tres valores inteiros</span>
  <span class="token comment">//com barras entre eles</span>
  <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">&quot;%d/%d/%d&quot;</span><span class="token punctuation">,</span><span class="token operator">&amp;</span>dia<span class="token punctuation">,</span><span class="token operator">&amp;</span>mes<span class="token punctuation">,</span><span class="token operator">&amp;</span>ano<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token function">system</span><span class="token punctuation">(</span><span class="token string">&quot;pause&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  
  <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>No exemplo acima, o comando <code>scanf()</code> é usado para a entrada de três valores inteiros separados por uma barra (&quot;/&quot;) cada(dados formatados como uma data: <em>dia/mês/ano</em>). Quando o usuário for digitar os três valores, será obrigado a digitar os três valores separados por barra (as barras serão descartadas e não interferem nos dados).</p><h4 id="limpando-o-buffer-do-teclado" tabindex="-1"><a class="header-anchor" href="#limpando-o-buffer-do-teclado" aria-hidden="true">#</a> Limpando o buffer do teclado</h4><p>As vezes, podem ocorrer erros durante a leitura de caracteres ou strings do teclado. Para resolver esses pequenos erros, podemos limpar o buffer do teclado (entrada-padrão) usando a função <code>setbuf(stdin, NULL)</code> antes de realizar a leitura de caracteres ou strings.</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token keyword">char</span> ch<span class="token punctuation">;</span>
<span class="token function">setbuf</span><span class="token punctuation">(</span><span class="token constant">stdin</span><span class="token punctuation">,</span> <span class="token constant">NULL</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">&quot;%c&quot;</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>ch<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="exercicios" tabindex="-1"><a class="header-anchor" href="#exercicios" aria-hidden="true">#</a> Exercícios</h2>`,67),u=a('<h2 id="referencias" tabindex="-1"><a class="header-anchor" href="#referencias" aria-hidden="true">#</a> Referências</h2><hr class="footnotes-sep"><section class="footnotes"><ol class="footnotes-list"><li id="footnote1" class="footnote-item"><p>Linguagem C - Completa e Descomplicada Capa comum, 2018, André Backes <a href="#footnote-ref1" class="footnote-backref">↩︎</a></p></li><li id="footnote2" class="footnote-item"><p>Algoritmos e programação em linguagem C, 2013, Renato Soffner <a href="#footnote-ref2" class="footnote-backref">↩︎</a></p></li></ol></section>',3);function m(v,k){const s=e("RouterLink");return o(),t("div",null,[l,p("p",null,[i(s,{to:"/posts/exercicios/01_estrutura_c.html"},{default:c(()=>[r("Exercício")]),_:1})]),u])}const b=n(d,[["render",m],["__file","04_linguagem_c.html.vue"]]);export{b as default};
