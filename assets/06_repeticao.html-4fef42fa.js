import{_ as a}from"./plugin-vue_export-helper-c27b6911.js";import{o as s,c as e,f as o,e as t,a as n,b as c}from"./app-e4242b7e.js";const p={},i=t(`<h1 id="estruturas-de-repeticao" tabindex="-1"><a class="header-anchor" href="#estruturas-de-repeticao" aria-hidden="true">#</a> Estruturas de repetição</h1><p>O comando while equivale ao comando &quot;enquanto&quot; utilizado nos pseudocódigos apresentados até agora.</p><p>A forma geral de um comando while é:</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token keyword">while</span> <span class="token punctuation">(</span>condição<span class="token punctuation">)</span><span class="token punctuation">{</span>
    sequência de comandos<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Na execução do comando while, a condição será avaliada e:</p><ul><li>Se a condição for considerada verdadeira (ou possuir valor diferente de zero), a sequência de comandos será executada. Ao final da sequência de comandos, o fluxo do programa é desviado novamente para o teste da condição.</li><li>Se a condição for considerada falsa (ou possuir valor igual a zero), a sequência de comandos não será executada.</li></ul><p>No códio abaixo temos um exemplo de um programa que lê dois números inteiros <code>a</code> e <code>b</code> digitados pelo usuário e imprime na tela todos os números inteiros entre <code>a</code> e <code>b</code>.</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h&gt;</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdlib.h&gt;</span></span>
<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token keyword">int</span> a<span class="token punctuation">,</span>b<span class="token punctuation">;</span>
    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;Digite o valor de a: &quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">&quot;%d&quot;</span><span class="token punctuation">,</span><span class="token operator">&amp;</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;Digite o valor de b: &quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">&quot;%d&quot;</span><span class="token punctuation">,</span><span class="token operator">&amp;</span>b<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">while</span> <span class="token punctuation">(</span>a <span class="token operator">&lt;</span> b<span class="token punctuation">)</span><span class="token punctuation">{</span>
        a <span class="token operator">=</span> a <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span>
        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;%d \\n&quot;</span><span class="token punctuation">,</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,8),l=n("h2",{id:"referencias",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#referencias","aria-hidden":"true"},"#"),c(" Referências")],-1);function u(d,r){return s(),e("div",null,[i,o(`

## Exercícios

[Exercício](exercicios/02_condicional.md)

`),l])}const v=a(p,[["render",u],["__file","06_repeticao.html.vue"]]);export{v as default};
