import{_ as n}from"./plugin-vue_export-helper-c27b6911.js";import{o as s,c as a,e as p}from"./app-4b44d2e6.js";const t={},o=p(`<h1 id="lista-encadeada-uso-do-malloc" tabindex="-1"><a class="header-anchor" href="#lista-encadeada-uso-do-malloc" aria-hidden="true">#</a> Lista encadeada (uso do malloc)</h1><p>exemplo de código</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h&gt;</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdlib.h&gt;</span></span>

<span class="token keyword">struct</span> <span class="token class-name">no</span><span class="token punctuation">{</span>
    <span class="token keyword">int</span> valor<span class="token punctuation">;</span>
    <span class="token keyword">struct</span> <span class="token class-name">no</span> <span class="token operator">*</span>proximo<span class="token punctuation">;</span>    
<span class="token punctuation">}</span><span class="token punctuation">;</span>



<span class="token keyword">void</span> <span class="token function">adicionarProximo</span><span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">no</span> <span class="token operator">*</span>inicio<span class="token punctuation">,</span> <span class="token keyword">int</span> valor<span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token keyword">struct</span> <span class="token class-name">no</span> <span class="token operator">*</span>atual <span class="token operator">=</span> inicio<span class="token punctuation">;</span>
    <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token operator">*</span>atual<span class="token punctuation">)</span><span class="token punctuation">.</span>proximo<span class="token operator">!=</span> <span class="token constant">NULL</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
        atual <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token operator">*</span>atual<span class="token punctuation">)</span><span class="token punctuation">.</span>proximo<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">struct</span> <span class="token class-name">no</span> <span class="token operator">*</span>novoNo<span class="token punctuation">;</span>
    novoNo <span class="token operator">=</span> <span class="token function">malloc</span><span class="token punctuation">(</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">no</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">(</span><span class="token operator">*</span>novoNo<span class="token punctuation">)</span><span class="token punctuation">.</span>valor <span class="token operator">=</span> valor<span class="token punctuation">;</span>
    <span class="token punctuation">(</span><span class="token operator">*</span>novoNo<span class="token punctuation">)</span><span class="token punctuation">.</span>proximo <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>
    <span class="token punctuation">(</span><span class="token operator">*</span>atual<span class="token punctuation">)</span><span class="token punctuation">.</span>proximo <span class="token operator">=</span> novoNo<span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">void</span> <span class="token function">mostarTodos</span><span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">no</span> <span class="token operator">*</span>inicio<span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token keyword">struct</span> <span class="token class-name">no</span> <span class="token operator">*</span>atual <span class="token operator">=</span> inicio<span class="token punctuation">;</span>
    <span class="token keyword">while</span><span class="token punctuation">(</span>atual<span class="token operator">!=</span> <span class="token constant">NULL</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;%d\\n&quot;</span><span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token operator">*</span>atual<span class="token punctuation">)</span><span class="token punctuation">.</span>valor<span class="token punctuation">)</span><span class="token punctuation">;</span>
        atual <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token operator">*</span>atual<span class="token punctuation">)</span><span class="token punctuation">.</span>proximo<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token keyword">struct</span> <span class="token class-name">no</span> inicio<span class="token punctuation">;</span>
    inicio<span class="token punctuation">.</span>valor <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>
    inicio<span class="token punctuation">.</span>proximo <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span>inicio<span class="token punctuation">.</span>proximo <span class="token operator">!=</span> <span class="token constant">NULL</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;tem proximo\\n&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span><span class="token keyword">else</span><span class="token punctuation">{</span>
        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;não tem proximo\\n&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token function">adicionarProximo</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>inicio<span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">adicionarProximo</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>inicio<span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">adicionarProximo</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>inicio<span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">adicionarProximo</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>inicio<span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span>inicio<span class="token punctuation">.</span>proximo <span class="token operator">!=</span> <span class="token constant">NULL</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;tem proximo\\n&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span><span class="token keyword">else</span><span class="token punctuation">{</span>
        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;não tem proximo\\n&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token function">mostarTodos</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>inicio<span class="token punctuation">)</span><span class="token punctuation">;</span>
    

    <span class="token comment">/* code */</span>
    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,3),c=[o];function e(i,l){return s(),a("div",null,c)}const r=n(t,[["render",e],["__file","08_lista_encadeada.html.vue"]]);export{r as default};
